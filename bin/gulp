#!/usr/bin/env ruby

# TODO: remove this
$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__)) + '/../lib')

# TODO: remove this
I_KNOW_I_AM_USING_AN_OLD_AND_BUGGY_VERSION_OF_LIBXML2 = 1

require 'rubygems'
require 'trollop'
require 'gulp'

interrupted = false
trap("INT") do
  puts "waiting so can exit cleanly..."
  @interrupted = true
end

def okay_to_terminate!
  if @interrupted
    puts "exited cleanly."
    exit
  end
end

SUB_COMMANDS = %w(add sip corpus_dump)
global_opts = Trollop::options do
  banner "statistically improbable phrase extractor"
  opt :database_directory, "Database directory", :type => String
  opt :quiet, "Quiet", :short => :q
  stop_on SUB_COMMANDS
end

cmd = ARGV.shift # get the subcommand
cmd_opts = case cmd
  when "add"
    Trollop::options do
      opt :file, "File", :type => String
    end
  when "sip"
    Trollop::options do
      opt :file, "File", :type => String, :required => true
    end
  when "corpus_dump"
  else
    Trollop::die "unknown subcommand #{cmd.inspect}"
  end

corpus = Gulp::Corpus.new()

case cmd
when "add"
  if cmd_opts[:file]
    files = [cmd_opts[:file]]
  else
    files = STDIN.read.split("\n")
  end
  
  files.each do |path|
    puts "processing #{path}..."
    
    doc = corpus.find_or_build_document(path)
    doc.save!
    
    okay_to_terminate!
  end
when "sip"
  doc = corpus.find_or_build_document(path)
  doc.calculate_sips!
  
  doc.phrases.each do |phrase|
    puts "#{phrase.string} (#{phrase.count})=> #{phrase.score}"
    okay_to_terminate!
  end
end